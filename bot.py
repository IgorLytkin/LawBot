# –ü—Ä–æ–µ–∫—Ç: –¢–ì-–±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–¥–≤–æ–∫–∞—Ç–∞, –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—é
# 09.02.2023    IgorLytkin  –Ω–∞—Å—Ç—Ä–æ–∏–ª SSH-–∫–ª—é—á –Ω–∞ GitHub
#
import asyncio
import logging
import os

from aiogram import Bot, Dispatcher, types

# –î–∞–Ω–Ω—ã–µ –æ–± –û–°
print(os.name)

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=os.getenv("BOT_TOKEN"))
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer("Hello!")


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test1
@dp.message(commands=["test1"])
async def cmd_test1(message: types.Message):
    await message.reply("Test 1")


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test2
async def cmd_test2(message: types.Message):
    await message.reply("Test 2")


@dp.message(commands=["answer"])
async def cmd_answer(message: types.Message):
    await message.answer("–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")


@dp.message(commands=["reply"])
async def cmd_reply(message: types.Message):
    await message.reply('–≠—Ç–æ –æ—Ç–≤–µ—Ç —Å "–æ—Ç–≤–µ—Ç–æ–º"')


@dp.message(commands=["dice"])
async def cmd_dice(message: types.Message, bot: Bot):
    await bot.send_dice(os.getenv("LAWCHANNEL_BOT_ID"), emoji="üé≤")


@dp.message(commands=["add_to_list"])
async def cmd_add_to_list(message: types.Message, mylist: list[int]):
    mylist.append(7)
    await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ —á–∏—Å–ª–æ 7")


@dp.message(commands=["show_list"])
async def cmd_show_list(message: types.Message, mylist: list[int]):
    await message.answer(f"–í–∞—à —Å–ø–∏—Å–æ–∫: {mylist}")


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
